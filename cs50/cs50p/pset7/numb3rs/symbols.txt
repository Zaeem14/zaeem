. (dot):

Matches any single character except newline (\n).
^ (caret):

Matches the start of a string. When used inside square brackets [ ], it negates the character class.
$ (dollar):

Matches the end of a string or just before the newline at the end of the string.
* (asterisk):

Matches 0 or more occurrences of the preceding character. For example, a* matches zero or more 'a' characters.
+ (plus):

Matches 1 or more occurrences of the preceding character. For example, a+ matches one or more 'a' characters.
? (question mark):

Matches 0 or 1 occurrence of the preceding character. It makes the preceding token optional. For example, colou?r matches both "color" and "colour".
{ } (curly braces):

Specify the number of occurrences of a character. {m} matches exactly m occurrences, {m,n} matches between m and n occurrences.
[ ] (square brackets):

Defines a character class. Matches any one of the enclosed characters. For example, [aeiou] matches any vowel.
| (vertical bar):

Acts like a logical OR. Matches either the expression before or after the |.
\ (backslash):

Escapes special characters, allowing you to match them as literals. For example, \. matches a literal dot.
() (parentheses):

Groups parts of a regular expression together. Also used to capture groups for extraction or for applying quantifiers.
\b and \B:

\b matches a word boundary (the position between a word character and a non-word character). \B matches a non-word boundary.
